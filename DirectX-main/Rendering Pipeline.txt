우리가 짠 코드를 화면에 출력하는 과정, 3d(입체)게임을 2d(평면)모니터에 표현하는 과정


Input Assembler --system
cpu와 gpu의 연산속도 차이를 완충하기 위해 buffer에 담아서 넘긴다.
cpu가 gpu에게 도형의 정점 정보를 전달하는 과정이다.

Vertex Shader - GPU가 연산하는 것이고 프로그래머가 코딩하는 곳이다.
정점 정보를 공간좌표계로 변환하는 과정이다.
정점 관련 계산을 하는 곳
SRT연산:
Scale, Rotate, Transmission


Tesselation Stage(생략가능) - 3D
정점을 더 잘게 쪼개어 디테일하게 표현할 때 사용한다.
먼곳은 저해상도 가까운곳은 고해상도로 표현하게 한다.

Geometry Shader(생략가능) - 3D
기본 도형에서 정점을 추가하거나 삭제하여 모델을 변경할 수 있는 셰이더이다.

Rasterization State --system
3d도형을 실제 픽셀 데이터로 변환해주는 단계이다. 이 정점 데이터 사이의 공간을 보간해야한다.
3D vertex를 2D pixel로 변경한다. 안티엘리어싱, 샘플링을 한다.
2d는 winAPI처럼 나중에 그려진것을 우선시한다.

Pixel Shader  - GPU가 연산하는 것이고 프로그래머가 코딩하는 곳이다. - 후처리 단계
RS에서 가져온 색을 가공한다.
Fragment Shader라고도 부르며, 레스터화된 도형에 텍스쳐를 입혀 색을 표현한다. 정점의 법선 벡터 정보를 통해 조명처리도 이루어진다.
변환된 상태에서 블러, 꾸미기가 추가된다. 후처리 단계라고도 한다.

Output Merger --system
출력을 모아서 깊이관련처리를 한다.
다수의 화면을 동시에 출력할 때 모든 연산이 끝나고 한번에 모아서 마무리한다.


